// Program to generate XML code from old map system to new one using XML
// NOTE: had to make this a "Game" because qourum doesn't understand the statement
// "Array<text> tmpArray = readLine:Split(",")" if not a Game ... BUG ???
// same with "Array<File> TargetMaps = Dir:GetDirectoryListing()"

use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.System.File
use Libraries.System.FileReader
use Libraries.System.FileWriter

class Main is Game
    Array<File> MapFiles
    text MapFolder = "Maps"
    text XmlFolder = "XmlMaps"
    integer g_GridX = 40          // This is the width  of each 'grid' on map
    integer g_GridY = 40          // This is the height of each 'grid' on map

    action Main
        // Load the maps into MapFiles Array
        LoadMapFiles(MapFolder)

        // Using this to save the xml files
        FileWriter writer
        File f
        f:SetWorkingDirectory(XmlFolder)

        // Open the map file find the line after [MAP] and place in readLine
        FileReader reader

        // do this for every map in MapFiles Array
        currentMapIndex = 0
        repeat while currentMapIndex < MapFiles:GetSize()
            reader:OpenForRead(MapFiles:Get(currentMapIndex))
            f:SetPath(MapFiles:Get(currentMapIndex):GetFileName() + ".xml")
            writer:OpenForWrite(f)

            writer:WriteLine("<Map>")
            writer:WriteLine("    <Layer>")

            // this first bit is to calculate how tall the room is...
            // we could always just manually specify how tall the room is
            pg_ScreenSizeY = 0
            readLine = ""
            repeat until readLine = "[MAP]" and not reader:IsAtEndOfFile()
                readLine = reader:ReadLine()
            end
            readLine = reader:ReadLine()
            repeat until readLine = "[MAPEND]" and not reader:IsAtEndOfFile()
                pg_ScreenSizeY = pg_ScreenSizeY + g_GridY
                readLine = reader:ReadLine()
            end
            reader:Close()
            // DONE, now reopen the file

            // Now we get to the fun stuff ..
            reader:OpenForRead(MapFiles:Get(currentMapIndex))
            readLine = ""
            repeat until readLine = "[MAP]" and not reader:IsAtEndOfFile()
                readLine = reader:ReadLine()
            end

            // Read the first line after [MAP]
            readLine = reader:ReadLine()
            
            integer currentY = 0
            repeat until readLine = "[MAPEND]" and not reader:IsAtEndOfFile()
                Array<text> tmpArray = readLine:Split(",")
                i = 0
                text myMap = ""
                repeat until i = tmpArray:GetSize()
                    if tmpArray:Get(i) not= " "     // don't create a blank object
                        text objName = ""
                        if tmpArray:Get(i) = "X"
                            objName = "BasicBox"
                        elseif tmpArray:Get(i) = "x"
                            objName = "MiniBasicBox"
                        elseif tmpArray:Get(i) = "X2"
                            objName = "BasicBox2"
                        elseif tmpArray:Get(i) = "X3"
                            objName = "BasicBox3"
                        elseif tmpArray:Get(i) = "B"
                            objName = "BasicBlock"
                        elseif tmpArray:Get(i) = "b"
                            objName = "MiniBasicBlock"
                        elseif tmpArray:Get(i) = "C"
                            objName = "Cannon"
                        elseif tmpArray:Get(i) = "SB"
                            objName = "StartButton"
                        elseif tmpArray:Get(i) = "F"
                            objName = "Fish"
                        elseif tmpArray:Get(i) = "L"
                            objName = "Lock"
                        elseif tmpArray:Get(i) = "K"
                            objName = "Key"
                        elseif tmpArray:Get(i) = "U"
                            objName = "Star"
                        elseif tmpArray:Get(i) = "W"
                            objName = "Water"
                        else
                            objName = "BasicBlock"
                        end
                        
                        integer tmpY = pg_ScreenSizeY-(currentY*g_GridY)-g_GridY
                        writer:WriteLine("	<" + objName + ">")
                        writer:WriteLine("	    <X>" + i*g_GridX + "</X>")
                        writer:WriteLine("	    <Y>" + tmpY + "</Y>")
                        writer:WriteLine("	</" + objName + ">")
                    end
                    myMap = myMap + tmpArray:Get(i)
                    i = i + 1
                end
                output myMap

                currentY = currentY + 1
                readLine = reader:ReadLine()
            end

            writer:WriteLine("    </Layer>")
            writer:WriteLine("</Map>")
            writer:Close()
            reader:Close()
            // move on to next map
            currentMapIndex = currentMapIndex + 1
        end

        StartGame()
    end

    action LoadMapFiles (text MapPath) returns integer
        File Dir
        Dir:SetPath(MapPath)    // apparently we can't just open for read from a path
        Dir:OpenForRead()

        // bugchecking
        if not Dir:IsDirectory()
            output "'" + Dir:GetAbsolutePath() + "' not a dir"
            return -1
        end

        // we got it open, now get a listing
        MapFiles = Dir:GetDirectoryListing()
        if MapFiles:GetSize() <= 0
            output "Didn't read any files, RIP ;-;7"
            return -1
        end

        return 0
    end

end