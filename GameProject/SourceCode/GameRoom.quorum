use Libraries.Containers.Array
use Libraries.System.File
use Libraries.System.FileReader
use Libraries.Game.Graphics.Drawable

class GameRoom
    GameObjects obj
    Array<Drawable> g_objs

    action GetObjCount
        returns integer
        return g_objs:GetSize()
    end

    // returns the first obj found with name
    // if none are found, returns empty obj
    action GetIndexOfObj (text objName)
        returns integer

        i = g_objs:GetSize()
        repeat until i = 0
            if (g_objs:Get(i-1):GetName() = objName)
                return i - 1 // obj found, return index
            end
        end

        // returns -1 if obj not found
        return -1
    end

    action GetObjAtIndex (integer index)
        returns Drawable
        return g_objs:Get(index)
    end

    action DeleteObjAtIndex (integer index)
        g_objs:RemoveAt(index)
    end
    
    // fills g_objs with the drawables in the room generated by the map file
    action InitializeRoo(text roomTextPath, number screenSizeX, number screenSizeY, number gridX, number gridY)
        text readLine = ""
        number currentY = 0

        // Open the map file find the line after [MAP] and place in readLine
        File f  
        f:SetPath(roomTextPath)
        FileReader reader
        reader:OpenForRead(f)
        repeat until readLine = "[MAP]" and not reader:IsAtEndOfFile()
            readLine = reader:ReadLine()
        end
        readLine = reader:ReadLine()

        repeat until readLine = "[MAPEND]" and not reader:IsAtEndOfFile()
            Array<text> tmpArray = readLine:Split(",")
            i = 0
            text myMap = ""
            repeat until i = tmpArray:GetSize()
                if tmpArray:Get(i) = " "     // don't create a blank object
                elseif tmpArray:Get(i) = "C" // make cat object first object on list
                    g_objs:AddToFront(obj:CreateObj(tmpArray:Get(i), i*gridX, screenSizeY-(currentY*gridY)-gridY))
                else
                    g_objs:Add(obj:CreateObj(tmpArray:Get(i), i*gridX, screenSizeY-(currentY*gridY)-gridY))
                end
                myMap = myMap + tmpArray:Get(i)
                i = i + 1
            end
            output myMap + " " + (screenSizeY-(currentY*gridY)-gridY)
            currentY = currentY + 1

            readLine = reader:ReadLine()
        end  
        reader:Close()
    end
end