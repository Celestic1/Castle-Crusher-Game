use Libraries.Compute.Vector2

class GameObject_Attribs

    // Set up the attributes from scratch. This may be messy. Or unused.
    action Init ()
    end
    
    // ObjectName is the name of the object.
    private text ObjectName = ""
    action SetObjectName (text newName)
	ObjectName = newName
    end
    action GetObjectName returns text
	return ObjectName
    end

    // SpritePath is a path for a sprite. THIS MAY NOT BE ADEQUATE.
    // If we try to have animations or more than one sprite, we may need
    // to update this sort of thing.
    private text SpritePath = ""
    boolean HasSpritePath = false
    action SetSpritePath (text newPath)
	SpritePath = newPath
	HasSpritePath = true
    end
    action GetSpritePath returns text
	return SpritePath
    end
    action CheckForSpritePath returns boolean
	return HasSpritePath
    end

    // Tangibility is whether the object should ever be touchable or not.
    // Buttons should not be tangible. Any object in a game should.
    // If it's not tangible, most of the rest of these attributes get skipped!
    boolean Tangible = false
    action SetTangible (boolean newTang)
	Tangible = newTang
    end
    action GetTangible returns boolean
	return Tangible
    end

    // PhysicsEnabled decides whether the object should be physics enabled.
    boolean PhysicsEnabled = false
    action SetPhysicsEnabled (boolean newPhys)
	PhysicsEnabled = newPhys
    end
    action GetPhysicsEnabled returns boolean
	return PhysicsEnabled
    end

    // Movable decides exactly what it sounds like.
    boolean Movable = false
    action SetMovable (boolean newMov)
	Movable = newMov
    end
    action GetMovable returns boolean
	return Movable
    end

    // responsive
    boolean Responsive = false
    action SetResponsive (boolean newRes)
	Responsive = newRes
    end
    action GetResponsive returns boolean
	return Responsive
    end

    boolean Collidable = false
    action SetCollidable (boolean newCol)
	Collidable = newCol
    end
    action GetCollidable returns boolean
	return Collidable
    end

    // Mass. Important!
    number Mass = 0
    action SetMass (number newMass)
	Mass = newMass
    end
    action GetMass returns number
	return Mass
    end

    // Friction. Important!
    number Friction = 0
    action SetFriction (number newFric)
	Friction = newFric
    end
    action GetFriction returns number
	return Friction
    end

    // Restitution. Bounciness.
    number Restitution = 0
    action SetRestitution (number newRest)
	Restitution = newRest
    end
    action GetRestitution returns number
	return Restitution
    end

    // Lots of different management functions for base position.
    // Will we need any? Maybe not. If not we cull them.
    Vector2 BasePosition
    action SetBasePosition (Vector2 newPos)
	BasePosition:Set(newPos)
    end
    action SetBasePosition (number newX, number newY)
	BasePosition:Set(newX, newY)
    end
    action SetBasePositionX (number newX)
	BasePosition:SetX(newX)
    end
    action SetBasePositionY (number newY)
	BasePosition:SetY(newY)
    end
    action GetBasePosition returns Vector2
	return BasePosition
    end
    action GetBasePositionX returns number
	return BasePosition:GetX()
    end
    action GetBasePositionY returns number
	return BasePosition:GetY()
    end

    // THIS DOES NOT TELL YOU IF IT IS NOT A PROJECTILE
    // This is just to make sure that the cannon isn't taking things it can't use.
    action IsProjectile() returns boolean
        return (GetTangible() and GetPhysicsEnabled() and GetMovable() and GetResponsive())
    end
end