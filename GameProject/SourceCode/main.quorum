use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Drawable
use Libraries.Game.InputMonitor
use Libraries.Interface.Events.KeyboardEvent
use Libraries.System.File
use GameObject
use GameObject_Attrib_List
use GameObject_Player

class Main is Game
    GameRoom RefRoom
    Array<GameRoom> RealRooms
    GameMouse GameMouseListener
    GameObject_Attrib_List src
    Camera camera = undefined
    GameObject_Library CoreLibrary

    // Stuff for quick reset key 'R'
    integer currentRoom = -1
    InputMonitor monitor            //create a KeyboardEvent object
    KeyboardEvent keys              //create a KeyboardEvent object

    action Main
        GameMouseListener:RefRoom = RefRoom
        // Fixed screensize / gamename
        SetScreenSize(RefRoom:pg_ScreenSizeX , RefRoom:pg_ScreenSizeY)
        SetGameName("Castle Crusher")
        StartGame()
    end

    action CreateGame
        XMLFileManager FileMan
        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/TempCoreDefs.xml")
	CoreLibrary:LoadLibraryFromTree(ReadRoot)
	CoreLibrary:OutputHashTableContents()
        camera = GetCamera2D()
        EnablePhysics2D(true)
        SetGravity2D(0, -200)
        AddMouseListener(GameMouseListener)
        AddMouseMovementListener(GameMouseListener)
        RefRoom:pg_CamMaxXOffset = 200

        // get the maps
        LoadMapFolder("./Maps")
        RealRooms:GetFromFront():AddRoomToGame(me)

        // Draw cursor
        Add(GameMouseListener)
    end

    action Update(number seconds)
        // Scrolling Update
        if GameMouseListener:pg_Scrolling > 0 or RefRoom:pg_CamReset = 1
            RefRoom:pg_CamReset = 0
            if GameMouseListener:pg_Scrolling = 1       // 180
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 2   // 0
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 3   // 270
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 4   // 90
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset + GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 5   // 225
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 6   // 135
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset + GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 7   // 315
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 8   // 45
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset + GameMouseListener:pg_ScrollSpeed
            end
            camera:SetPosition(RefRoom:pg_CamXOffset + RefRoom:pg_ScreenSizeX/2, RefRoom:pg_CamYOffset + RefRoom:pg_ScreenSizeY/2, 0)
            GameMouseListener:SetCenter(RefRoom:pg_CamXOffset + GameMouseListener:pg_LastMouseX, RefRoom:pg_CamYOffset + GameMouseListener:pg_LastMouseY)
        end

        // If the user is pressing the 'R' key, reset the room
        // ... seems to only reset the camera, room will be in the same state as before
        if monitor:IsKeyPressed(keys:R)
            RealRooms:Get(currentRoom):RemoveRoomFromGame(me)
            RealRooms:Get(currentRoom):AddRoomToGame(me)
        end

        // If the user is pressing the '1' key, jump to map0
        if monitor:IsKeyPressed(keys:NUM_1)
            RealRooms:Get(currentRoom):RemoveRoomFromGame(me)
            currentRoom = 0
            RefRoom = RealRooms:Get(currentRoom)
            GameMouseListener:RefRoom = RefRoom
            RealRooms:Get(currentRoom):AddRoomToGame(me)
        end

        // If the user is pressing the '2' key, jump to map1
        if monitor:IsKeyPressed(keys:NUM_2)
            RealRooms:Get(currentRoom):RemoveRoomFromGame(me)
            currentRoom = 1
            RefRoom = RealRooms:Get(currentRoom)
            GameMouseListener:RefRoom = RefRoom
            RealRooms:Get(currentRoom):AddRoomToGame(me)
        end

        // If the user is pressing the '3' key, jump to map2
        if monitor:IsKeyPressed(keys:NUM_3)
            RealRooms:Get(currentRoom):RemoveRoomFromGame(me)
            currentRoom = 2
            RefRoom = RealRooms:Get(currentRoom)
            GameMouseListener:RefRoom = RefRoom
            RealRooms:Get(currentRoom):AddRoomToGame(me)
        end
    end

    action HackedTogetherCannonLoad (GameObject_Player PlayCan, integer count)
/*        repeat count times
            GameObject nextShot
            nextShot:InitGameObject(src:GetNewCannonBallAttribs(0,0))
            nextShot:AddToGame(me)
            PlayCan:LoadCannon(nextShot)
        end*/
    end

    action LoadMapFolder (text MapPath) returns integer
        File Dir
        Dir:SetPath(MapPath)    // apparently we can't just open for read from a path
        Dir:OpenForRead()

        // bugchecking
        if not Dir:IsDirectory()
            output "You fucked up, " + Dir:GetAbsolutePath() + " isn't a dir"
            return -1
        end

        // we got it open, now get a listing
        Array<File> TargetMaps = Dir:GetDirectoryListing()
        if TargetMaps:GetSize() <= 0
            output "Didn't read any files, RIP"
            return -1
        end

        integer Next = 0
        repeat while Next < TargetMaps:GetSize()
            GameRoom NextRoom
            NextRoom:LoadRoomFromFile(TargetMaps:Get(Next), CoreLibrary)
            RealRooms:Add(NextRoom)
            Next = Next + 1
        end

        // update the refroom to currentroom
        currentRoom = 0
        RefRoom = RealRooms:Get(currentRoom)
        GameMouseListener:RefRoom = RefRoom

        return 0
    end

end