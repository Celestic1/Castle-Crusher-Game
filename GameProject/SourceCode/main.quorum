use Libraries.Containers.Array
use Libraries.Containers.Stack
use Libraries.Containers.HashTable
use Libraries.Game.Game
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Drawable
use Libraries.System.File
use GameObject
//use GameObject_Attrib_List
use GameObject_Player

class Main is Game
    GameRoom RefRoom
    Stack<GameRoom> RoomStack
    HashTable<text,GameRoom> MenuTable
    GameMouse GameMouseListener
//    GameObject_Attrib_List src
    Camera camera = undefined
    GameObject_Library CoreLibrary
//    Drawable mainScreen
    MainMenu mainmenu
    LevelSelector ls

    public integer currentLevel = 0

    action Main
        GameMouseListener:RefRoom = RefRoom
        // Fixed screensize / gamename
        SetScreenSize(RefRoom:pg_ScreenSizeX , RefRoom:pg_ScreenSizeY)
        SetGameName("Castle Crusher")
        StartGame()
    end

    action CreateGame
        XMLFileManager FileMan
        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/CoreDefs.xml")
	CoreLibrary:LoadLibraryFromTree(ReadRoot)
	CoreLibrary:OutputHashTableContents()
        camera = GetCamera2D()
        EnablePhysics2D(true)
        SetGravity2D(0, -75)
        AddMouseListener(GameMouseListener)
        AddMouseMovementListener(GameMouseListener)

        RefRoom:pg_CamMaxXOffset = 200
	/*GameRoom_Level TestRoom
	TestRoom:LoadRoomFromFile("Maps/TestMap.xml",CoreLibrary)
	TestRoom:AddRoomToGame(me)*/

        // Draw cursor
        Add(GameMouseListener)
        //AddMouseListener(GameMouseListener)
        //AddMouseMovementListener(GameMouseListener)
        RefRoom:pg_CamMaxXOffset = 200
        mainmenu:InitMainMenu(me)
        PushRoomStack(mainmenu)
        ls:CreateScreen(me)
        MenuTable:Add("LevelSelector",ls)
        

        Add(GameMouseListener)
    end

    action Update(number seconds)
        if currentLevel > 0
            if GameMouseListener:pg_HScrolling not= 0 or GameMouseListener:pg_VScrolling not= 0 or RefRoom:pg_CamReset = 1
                RefRoom:pg_CamReset = 0

                if GameMouseListener:pg_HScrolling = -1 and RefRoom:pg_CamXOffset > GameMouseListener:pg_ScrollSpeed
                    RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
                elseif GameMouseListener:pg_HScrolling = 1
                    RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
                end

                if GameMouseListener:pg_VScrolling = -1 and RefRoom:pg_CamYOffset > GameMouseListener:pg_ScrollSpeed
                    RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset - GameMouseListener:pg_ScrollSpeed
                elseif GameMouseListener:pg_VScrolling = 1
                    RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset + GameMouseListener:pg_ScrollSpeed
                end

                camera:SetPosition(RefRoom:pg_CamXOffset + RefRoom:pg_ScreenSizeX/2, RefRoom:pg_CamYOffset + RefRoom:pg_ScreenSizeY/2, 0)
                GameMouseListener:SetCenter(RefRoom:pg_CamXOffset + GameMouseListener:pg_LastMouseX, RefRoom:pg_CamYOffset + GameMouseListener:pg_LastMouseY)
            end
        else
            RefRoom:pg_CamXOffset = 0
            RefRoom:pg_CamYOffset = 0
            camera:SetPosition(RefRoom:pg_CamXOffset + RefRoom:pg_ScreenSizeX/2, RefRoom:pg_CamYOffset + RefRoom:pg_ScreenSizeY/2, 0)
            GameMouseListener:SetAlpha(0)
        end
    end

    action GetCoreLibrary returns GameObject_Library
        return CoreLibrary
    end

    // ROOM AND STACK MANAGEMENT
    // PRETTY FRIGGIN IMPORTANT

    action PushRoomStack (GameRoom NewRoom)
        if RoomStack:GetSize() > 0
            RoomStack:Peek():RemoveRoomFromGame(me)
        end
        RoomStack:Push(NewRoom)
        RoomStack:Peek():AddRoomToGame(me)
    end

    action MenuOntoRoomStack (text NextMenu)
        PushRoomStack(MenuTable:GetValue(NextMenu))
    end

    action PopRoomStack
        if RoomStack:GetSize() <= 0
            Exit()
        else
            RoomStack:Peek():RemoveRoomFromGame(me)
            RoomStack:Pop()
            if RoomStack:GetSize() > 0
                RoomStack:Peek():AddRoomToGame(me)
            else
                Exit()
            end
        end
    end

    action GetCoreLib returns GameObject_Library
        return CoreLibrary
    end
end