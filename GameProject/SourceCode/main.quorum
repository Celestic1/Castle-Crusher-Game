use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Drawable
use Libraries.System.File
use GameObject
use GameObject_Attrib_List
use GameObject_Player

class Main is Game
    GameRoom RefRoom
    Array<GameRoom> RealRooms
    Array<GameObject> ammo
    GameMouse GameMouseListener
    GameObject_Player player
    Camera camera = undefined
    GameObject_Library CoreLibrary

    action Main
        GameMouseListener:RefRoom = RefRoom
        // Fixed screensize / gamename
        SetScreenSize(RefRoom:pg_ScreenSizeX , RefRoom:pg_ScreenSizeY)
        SetGameName("Castle Crusher")
        StartGame()
    end

    action CreateGame
        XMLFileManager FileMan
//        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/TempCoreDefs.xml")
        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/CoreDefs.xml")
	CoreLibrary:LoadLibraryFromTree(ReadRoot)
	CoreLibrary:OutputHashTableContents()
        camera = GetCamera2D()
        EnablePhysics2D(true)
        SetGravity2D(0, -200)
        AddMouseListener(GameMouseListener)
        AddMouseMovementListener(GameMouseListener)
        RefRoom:pg_CamMaxXOffset = 200

        // get the maps
//        LoadMapFolder("./Maps")
//        RealRooms:GetFromFront():AddRoomToGame(me)

	GameRoom_Level TestRoom
	TestRoom:LoadRoomFromFile("Maps/map0.xml",CoreLibrary,player,LoadStandardCannonBall(20))
	TestRoom:AddRoomToGame(me)

        // Draw cursor
        Add(GameMouseListener)
    end

    action Update(number seconds)
        // Scrolling Update
        if GameMouseListener:pg_Scrolling > 0 or RefRoom:pg_CamReset = 1
            RefRoom:pg_CamReset = 0
            if GameMouseListener:pg_Scrolling = 1
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 2
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
            end
            camera:SetPosition(RefRoom:pg_CamXOffset + RefRoom:pg_ScreenSizeX/2, RefRoom:pg_CamYOffset + RefRoom:pg_ScreenSizeY/2, 0)
            GameMouseListener:SetCenter(RefRoom:pg_CamXOffset + GameMouseListener:pg_LastMouseX, RefRoom:pg_CamYOffset + GameMouseListener:pg_LastMouseY)
        end

/*        // Check if there are objs that need to be removed
        repeat until RefRoom:GetDelQueueSize() = 0
            GameObject tmpDraw = RefRoom:DequeueDelObj()
            tmpDraw:RemoveFromGame(me)
        end

        // Check if there are objs that need to be added
        repeat until RefRoom:GetAddQueueSize() = 0
            GameObject tmpDraw = RefRoom:DequeueAddObj()
            tmpDraw:AddToGame(me)        // Add standard Drawable

	    if tmpDraw:GetAttributes():GetObjectName() = "objCannon"
                // for reasons mysterious, you can't do this more than 31 times without a crash
                LoadStandardCannonBall (cast(GameObject_Player,tmpDraw), 20)
                //LoadHECannonBall (cast(GameObject_Player,tmpDraw), 20)
                //LoadAPCannonBall (cast(GameObject_Player,tmpDraw), 20)
	    end
        end*/
    end

    action LoadStandardCannonBall (integer count) returns Array<GameObject>
        Array<GameObject> standardCannonBalls
        GameObject standardCannonBall 
        integer i = 0
        repeat count times
            standardCannonBall = CoreLibrary:GetGameObject("StandardCannonBall")
            standardCannonBalls:Add(standardCannonBall)
            output "Standard cannonball loaded!"
        end
        return standardCannonBalls
    end

    action LoadMapFolder (text MapPath) returns integer
        File Dir
        Dir:SetPath(MapPath)    // apparently we can't just open for read from a path
        Dir:OpenForRead()

        // bugchecking
        if not Dir:IsDirectory()
            output "You fucked up, " + Dir:GetAbsolutePath() + " isn't a dir"
            return -1
        end

        // we got it open, now get a listing
        Array<File> TargetMaps = Dir:GetDirectoryListing()
        if TargetMaps:GetSize() <= 0
            output "Didn't read any files, RIP"
            return -1
        end

        integer Next = 0
        repeat while Next < TargetMaps:GetSize()
            GameRoom NextRoom
//            NextRoom:LoadRoomFromFile(TargetMaps:Get(Next), CoreLibrary)
            RealRooms:Add(NextRoom)
            Next = Next + 1
        end
        return 0
    end
/*
    action LoadHECannonBall (GameObject_Player PlayCan, integer count)
        repeat count times
            GameObject nextShot
            nextShot:InitGameObject(src:GetNewHECannonBallAttribs(0,0))
            nextShot:AddToGame(me)
            PlayCan:LoadCannon(nextShot)
        end
        output "HE cannonball loaded!"
    end

    action LoadAPCannonBall (GameObject_Player PlayCan, integer count)
        repeat count times
            GameObject nextShot
            nextShot:InitGameObject(src:GetNewAPCannonBallAttribs(0,0))
            nextShot:AddToGame(me)
            PlayCan:LoadCannon(nextShot)
        end
        output "AP cannonball loaded!"
    end
*/
end