use Libraries.Containers.Array
use Libraries.Containers.Stack
use Libraries.Containers.HashTable
use Libraries.Game.Game
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Drawable
use Libraries.System.File
use GameObject
use GameObject_Attrib_List
use GameObject_Player

class Main is Game
    GameRoom RefRoom
    Stack<GameRoom> RoomStack
    HashTable<text,GameRoom> MenuTable
    GameMouse GameMouseListener
    GameObject_Attrib_List src
    Camera camera = undefined
    GameObject_Library CoreLibrary
<<<<<<< HEAD
//    Drawable mainScreen
    MainMenu mainmenu
    LevelSelector ls
=======
>>>>>>> gupta

    action Main
        //GameMouseListener:RefRoom = RefRoom
        // Fixed screensize / gamename
        SetScreenSize(RefRoom:pg_ScreenSizeX , RefRoom:pg_ScreenSizeY)
        SetGameName("Castle Crusher")
        StartGame()
    end

    action CreateGame
        XMLFileManager FileMan
//        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/TempCoreDefs.xml")
        XMLNode ReadRoot = FileMan:GetXMLFromFile("Definitions/CoreDefs.xml")
	CoreLibrary:LoadLibraryFromTree(ReadRoot)
	CoreLibrary:OutputHashTableContents()
        camera = GetCamera2D()
        EnablePhysics2D(true)
        SetGravity2D(0, -200)
        AddMouseListener(GameMouseListener)
        AddMouseMovementListener(GameMouseListener)
<<<<<<< dev
        RefRoom:pg_CamMaxXOffset = 200
	GameRoom_Level TestRoom
	TestRoom:LoadRoomFromFile("Maps/TestMap.xml",CoreLibrary)
	TestRoom:AddRoomToGame(me)

        // Draw cursor
        Add(GameMouseListener)
        //AddMouseListener(GameMouseListener)
        //AddMouseMovementListener(GameMouseListener)
=======
<<<<<<< HEAD
>>>>>>> local
        //RefRoom:pg_CamMaxXOffset = 200
        mainmenu:InitMainMenu(me)
        PushRoomStack(mainmenu)
        ls:CreateScreen(me)
        MenuTable:Add("LevelSelector",ls)
        
=======
        RefRoom:pg_CamMaxXOffset = 200
        mainScreen:SetName("screen")
        //mainScreen:LoadFilledRectangle(me:GetScreenWidth(), me:GetScreenHeight())
        //mainScreen:Load("/assets/newBackground.png")
        Add(mainScreen)
        createMainMenu()
        

        // get the maps
//        LoadMapFolder("./Maps")
//        RealRooms:GetFromFront():AddRoomToGame(me)
	GameRoom_Level TestRoom
	TestRoom:LoadRoomFromFile("Maps/TestMap.xml",CoreLibrary)
	TestRoom:AddRoomToGame(me)
>>>>>>> gupta

<<<<<<< dev
        //Add(GameMouseListener)
    end

    action Update(number seconds)

=======
        // Draw cursor
        Add(GameMouseListener)
    end

    action Update(number seconds)
        // Scrolling Update
<<<<<<< HEAD
        if GameMouseListener:pg_HScrolling not= 0 or GameMouseListener:pg_VScrolling not= 0 or RefRoom:pg_CamReset = 1
            RefRoom:pg_CamReset = 0

            if GameMouseListener:pg_HScrolling = -1
=======
        if GameMouseListener:pg_Scrolling > 0 or RefRoom:pg_CamReset = 1
            RefRoom:pg_CamReset = 0
            if GameMouseListener:pg_Scrolling = 1
>>>>>>> gupta
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_HScrolling = 1
                RefRoom:pg_CamXOffset = RefRoom:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
            end

            if GameMouseListener:pg_VScrolling = -1
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_VScrolling = 1
                RefRoom:pg_CamYOffset = RefRoom:pg_CamYOffset + GameMouseListener:pg_ScrollSpeed
            end

            camera:SetPosition(RefRoom:pg_CamXOffset + RefRoom:pg_ScreenSizeX/2, RefRoom:pg_CamYOffset + RefRoom:pg_ScreenSizeY/2, 0)
            GameMouseListener:SetCenter(RefRoom:pg_CamXOffset + GameMouseListener:pg_LastMouseX, RefRoom:pg_CamYOffset + GameMouseListener:pg_LastMouseY)
        end
<<<<<<< HEAD
=======

/*        // Check if there are objs that need to be removed
        repeat until RefRoom:GetDelQueueSize() = 0
            GameObject tmpDraw = RefRoom:DequeueDelObj()
            tmpDraw:RemoveFromGame(me)
        end

         // Check if there are objs that need to be added
        repeat until RefRoom:GetAddQueueSize() = 0
            GameObject tmpDraw = RefRoom:DequeueAddObj()
            tmpDraw:AddToGame(me)        // Add standard Drawable

	    if tmpDraw:GetAttributes():GetObjectName() = "objCannon"
                // for reasons mysterious, you can't do this more than 31 times without a crash
                    HackedTogetherCannonLoad (cast(GameObject_Player,tmpDraw), 10)
	    end
            //end
        end*/
>>>>>>> gupta
>>>>>>> local
    end

    action GetCoreLibrary returns GameObject_Library
        return CoreLibrary
    end

    action createMainMenu

/*
        exitFunction exit
        startFunction start
        mainmenu:Create(mainScreen)
        exit:setGame(me)
        start:setMainMenu(mainmenu)
//        start:setGameRoom(roo)
        start:setGame(me)
        mainmenu:startMenu:LoadClick(start)
        mainmenu:exitMenu:LoadClick(exit)
        mainmenu:Render()
*/
    end

    // ROOM AND STACK MANAGEMENT
    // PRETTY FRIGGIN IMPORTANT

    action PushRoomStack (GameRoom NewRoom)
        if RoomStack:GetSize() > 0
            RoomStack:Peek():RemoveRoomFromGame(me)
        end
        RoomStack:Push(NewRoom)
        RoomStack:Peek():AddRoomToGame(me)
    end

    action MenuOntoRoomStack (text NextMenu)
        PushRoomStack(MenuTable:GetValue(NextMenu))
    end

    action PopRoomStack
        if RoomStack:GetSize() <= 0
            Exit()
        else
            RoomStack:Peek():RemoveRoomFromGame(me)
            RoomStack:Pop()
            if RoomStack:GetSize() > 0
                RoomStack:Peek():AddRoomToGame(me)
            else
                Exit()
            end
        end
    end

end