use Libraries.Containers.Array
use Libraries.Game.Game
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.Drawable
use GameObject
use GameObject_Attrib_List
use GameObject_Player

class Main is Game
    GameRoom roo
    GameMouse GameMouseListener
    GameCollision GameCollisionListener
    GameObject_Attrib_List src
    Camera camera = undefined
    Drawable mainScreen
    MainMenu mainmenu
    MainMenuDisplay mainmenudisplay

    action Main
        GameMouseListener:roo = roo
        GameCollisionListener:roo = roo
        // Fixed screensize / gamename
        SetScreenSize(roo:pg_ScreenSizeX , roo:pg_ScreenSizeY)
        SetGameName("Castle Crusher")
        StartGame()
    end

    action CreateGame
        camera = GetCamera2D()
        EnablePhysics2D(true)
        SetGravity2D(0, -200)
        AddCollisionListener(GameCollisionListener)
        AddMouseListener(GameMouseListener)
        AddMouseMovementListener(GameMouseListener)
        //roo:LoadRoom("./testMap2.txt")
        roo:pg_CamMaxXOffset = 200
        mainScreen:SetName("screen")
        //mainScreen:LoadFilledRectangle(me:GetScreenWidth(), me:GetScreenHeight())
        //mainScreen:Load("/assets/newBackground.png")
        Add(mainScreen)
        createMainMenu()
        

        Add(GameMouseListener)
    end

    action Update(number seconds)
        // Scrolling Update

        if GameMouseListener:pg_Scrolling > 0 or roo:pg_CamReset = 1
            roo:pg_CamReset = 0
            if GameMouseListener:pg_Scrolling = 1
                roo:pg_CamXOffset = roo:pg_CamXOffset - GameMouseListener:pg_ScrollSpeed
            elseif GameMouseListener:pg_Scrolling = 2
                roo:pg_CamXOffset = roo:pg_CamXOffset + GameMouseListener:pg_ScrollSpeed
            end
            camera:SetPosition(roo:pg_CamXOffset + roo:pg_ScreenSizeX/2, roo:pg_CamYOffset + roo:pg_ScreenSizeY/2, 0)
            GameMouseListener:SetCenter(roo:pg_CamXOffset + GameMouseListener:pg_LastMouseX, roo:pg_CamYOffset + GameMouseListener:pg_LastMouseY)
        end

        // Check if there are objs that need to be removed
        repeat until roo:GetDelQueueSize() = 0
            GameObject tmpDraw = roo:DequeueDelObj()
            tmpDraw:RemoveFromGame(me)
        end

        // Check if there are objs that need to be added
        repeat until roo:GetAddQueueSize() = 0
            GameObject tmpDraw = roo:DequeueAddObj()
            tmpDraw:AddToGame(me)        // Add standard Drawable

	    if tmpDraw:GetAttributes():GetObjectName() = "objCannon"
                // for reasons mysterious, you can't do this more than 31 times without a crash
                    HackedTogetherCannonLoad (cast(GameObject_Player,tmpDraw), 10)
	    end
            //end
        end
    end

    action HackedTogetherCannonLoad (GameObject_Player PlayCan, integer count)
        repeat count times
            GameObject nextShot
            nextShot:InitGameObject(src:GetNewCannonBallAttribs(0,0))
            nextShot:AddToGame(me)
            PlayCan:LoadCannon(nextShot)
        end
    end

    action createMainMenu
    
        exitFunction exit
        startFunction start
        mainmenudisplay:Create(mainScreen, mainmenu)
        exit:setGame(me)
        start:setMainMenu(mainmenudisplay)
        start:setGameRoom(roo)
        start:setGame(me)
        mainmenu:startMenu:LoadClick(start)
        mainmenu:exitMenu:LoadClick(exit)
        mainmenudisplay:Create()
    end

end